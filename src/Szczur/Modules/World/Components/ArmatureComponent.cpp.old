#include "ArmatureComponent.hpp"

/** @file ArmatureComponent.cpp
 ** @description Implementation file for armature component class.
 ** @author Patryk (PsychoX) Ludwikowski <psychoxivi+basementstudios@gmail.com>
 ** @todo Zamknąć oczy i zapomnieć :|
 **/

#include <SFML/Graphics/Color.hpp>

#include <dragonBones/animation/Animation.h>

namespace sf3d {
	class Texture;
	class VertexArray;
	class RenderTarget;
	class RenderStates;
}

#include "Szczur/Modules/DragonBones/SF3DArmatureDisplay.hpp"
#include "Szczur/Modules/World/DisplayData/ArmatureDisplayData.hpp"

namespace rat
{

/* Properties */
/// Animation
dragonBones::Animation* ArmatureComponent::getAnimation()
{
	return this->pose->getAnimation();
}



/* Operators */
/// Constructors
ArmatureComponent::ArmatureComponent()
{};
ArmatureComponent::ArmatureComponent(ArmatureDisplayData* displayData, const std::string& animation)
:
	displayData(displayData)
{
	this->pose = displayData->getFactory().buildArmatureDisplay(displayData->name);

	if (!animation.empty()) {
		this->getAnimation()->play(animation); // @todo , whole config
	}
};

/// Destructor
ArmatureComponent::~ArmatureComponent()
{
	if (this->pose) {
		delete this->pose;
	}
}

/// Movable
ArmatureComponent::ArmatureComponent(ArmatureComponent&& other)
{
	this->pose = other.pose;
	other.pose = nullptr;
};
// @todo , move operator = 



/* Methods */
/// draw
void ArmatureComponent::draw(sf3d::RenderTarget& target, sf3d::RenderStates states) const
{
	// @todo . usunąć SF3DArmatureDisplay, używać bezpośrednio naszego Transforma
	states.transform *= this->transform;
	target.draw(this->pose, states);
}

}
